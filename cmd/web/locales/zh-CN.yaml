id: zh-CN
messages:
    - key: '%s at %s:%d'
      message:
        msg: '%s 位于 %s:%d'
    - key: '%s can not convert to ast.StructType'
      message:
        msg: 不能将 %s 转换为 ast.StructType
    - key: '%s requires at least %d parameters'
      message:
        msg: '%s 至少需要 %d 个参数'
    - key: '%s when exec %s, use the preset value %s'
      message:
        msg: 当执行 %[2]s 时发生了错误：%[1]s。将采用默认值 %[3]s 代替。
    - key: '@query must point to an object'
      message:
        msg: '@query 必须指定一个对象'
    - key: |
        Auxiliary tool for github.com/issue9/web

        commands：
        {{commands}}

        flags：
        {{flags}}

        visit https://github.com/issue9/web for more info.
      message:
        msg: |
            框架 github.com/issue9/web 的辅助工具

            子命令：
            {{commands}}

            选项：
            {{flags}}

            更多信息可访问 https://github.com/issue9/web。
    - key: app args
      message:
        msg: 传递给应用的参数
    - key: build go source
      message:
        msg: 编译 Go 代码
    - key: build usage
      message:
        msg: |
            将参数中的占位符替换成相应的值，然后调用 `go build` 进行编译。
            在没有占位符的情况下，和直接调用 `go build` 是相同的。比如：

            web build -ldflags="-X main.version={{version}}" ./

            相当于调用

            go build -ldflags="-X main.version=1.0.0" ./

            目前支持以下占位符：

            {{version}} 表示最新的 git tag 值；
            {{full-commit}} 最新的 commit hash 值；
            {{commit}} 最新的 commit hash 值；
    - key: cancelled
      message:
        msg: 被取消
    - key: command %s not found
      message:
        msg: |
            未找到子命令 %s
    - key: dest locale files
      message:
        msg: 需要更新的文件列表。如果多个文件则以逗号分隔。
    - key: dev mode
      message:
        msg: 是否启用开发模式，具体可参考 mode 下的说明。
    - key: 'dup # restdoc node'
      message:
        msg: '重复的节点 # restdoc'
    - key: exclude watch files
      message:
        msg: 不需要监视的文件，遵循 path.Match 规则。
    - key: extract locale
      message:
        msg: 提取本地化内容
    - key: |
        extract usage

        flags：
        {{flags}}
      message:
        msg: |
            提取源代码中的本地化内容

            默认情况下，会提取由 web.Phrase、web.NewLocaleError、web.StringPhrase、web.Context.Sprintf、
            localeutil.Phrase、localeutil.NewLocaleError、localeutil.StringPhrase 的参数作为本地化数据。
            当然用户也可以通过 -func 指定其它函数，只要其第一个参数是 string 类型的都可以。

            可用选项：
            {{flags}}
    - key: file format
      message:
        msg: 输出文件的格式，目前支持 JSON 和 YAML
    - key: filter by tag
      message:
        msg: 按标签过滤
    - key: gen restdoc
      message:
        msg: 提取注释中的 restdoc 文档生成 openapi
    - key: ignore %s
      message:
        msg: 忽略 %s
    - key: invalid format
      message:
        msg: 无效的格式
    - key: invalid http method %s
      message:
        msg: 无效的请求方法 %s
    - key: language
      message:
        msg: 语言
    - key: locale func
      message:
        msg: 源代码中用于输出本地化信息的函数
    - key: no src dir
      message:
        msg: 未指定源码目录
    - key: not found module %s
      message:
        msg: 未找到模块 %s
    - key: not found schema ref %s
      message:
        msg: 未找到 %s 指向的类型组件
    - key: not found struct %s
      message:
        msg: 未找到结构体 %s
    - key: not show ignore message
      message:
        msg: 不显示可忽略的消息
    - key: only support yaml and json
      message:
        msg: 仅支持 YAML 和 JSON
    - key: out dir
      message:
        msg: 输出目录
    - key: override global response %s
      message:
        msg: '%s 与定义的全局对象相同，在当前接口中将覆盖全局定义。'
    - key: package %s with the same name.
      message:
        msg: '%s 已经拥有相同的名称'
    - key: parse module dependencies
      message:
        msg: 同时也对模块的直接依赖进行解析
    - key: recursive dir
      message:
        msg: 递归访问子目录
    - key: restdoc usage
      message:
        msg: |
            提取注释中的 restdoc 文档生成 openapi。restdoc 格式如下：

            # restdoc title of doc

            这是项目唯一的，title of doc 表示文档的标题，还可以通过以下标题指定一些全局属性：

              @tag tagID desc 指定了 openapi 的 Tag；
              @server tags url desc 指定了 openapi 的 Server 对象，作了精简，不支持 Server Variable 的形式。
                tags 为支持的标签，多个标签用逗号分隔，可以采用 * 表示支持所有；
              @license name url 指定了文档的版权信息；
              @term url 指定了文档的隐私策略；
              @version 指定了文档的版本号，可以指定以下几种特殊的符号：
                - git 表示采用 git tag 和 git commit hash 作为版本号；
                - git-full 表示采用 git tag 和完整的 git commit hash 作为版本号；
              @contact name url email 指定了联系方式，url 和 email 位置没有要求，根据格式自动确定，两者也可以不用全指定；
              @media application/json application/xml 指定了所有 api 默认的内容类型；
              @header name desc 公共报头；
              @cookie name desc 公共的 cookie；
              @resp status media object.path desc 定义了全局返回对象，会被附加在每个 API 上。一般用于指定错误处理对象；
              @resp-header name header desc 指定了 @resp 中设定的返回对象的报头；
              @doc url 扩展文档；
              @openapi path 引入另一个 openapi 文档，path 可以是一个 uri，比如 https://example.com/openapi.yaml，
                或是具体的 Go 包下的目录，比如 github.com/issue9/test/v2@v2.0.1 openapi.yaml，
                表示 test/v2 下的 openapi.yaml 文件；

            # api method path summary

            定义每个 API 文档

            method 表示请求方法，多个请求方法可以用逗号分隔，或是用 ANY 表示所有请求方法，但是不能包含空格；
            path 表示路径，summary 为该接口的简要说明。这些内容将在 # restdoc 解析完之后才会解析。可以包含以下标签：

              @id 唯一 ID，相当于 openapi 的 OperationID；
              @tag tag1 tag2 该接口要关联的标签，多个标签用空格分隔；
              @header key desc 指定请求报头；
              @cookie key desc 指定了 cookie；
              @path key type desc 指定了路径中的参数，key 为参数名，type 为参数类型，只能是基本类型；
              @query object.path desc 查询参数，object.path 表示指向查询参数的定义，可参考 schema 节的说明；
              @req media object.path desc 定义请求格式，media 如果采用全局指定的默认值，可以用 *，如果是多个值，用逗号分隔；
              @resp status media object.path desc 指定返回的数据类型；
              @resp-header status key desc 指定报头；

              ## callback name method url desc

              指定回调方法，只能依附于 # api 之后，标签大部分与 # api 相同，但是少了 @id、@tag、@path。

            schema

            类似 godoc 在注释中引用对象，restdoc 也是通过注释指向一个具体对象，将其解析为 openapi.Schema 对象；
            格式为：[modpath.]object-name，modpath 为引用对象的导入路径，object-name 为引用的对象名，比如：
            github.com/issue9/web.Problem。如果是数组可以加上 [] 作为前缀。{} 表示空对象。

            类型文档中可以通过使用以下标签指定特殊属性：

              @type type-name 将类型指定为 type-name，要求 type-name 必须是合法的 openapi3 类型；
              @enum n1 n2 当前类型包含了枚举值 n1，n2；

            可用选项：
            {{flags}}

            注意事项

              不支持 GOPATH 模式，map 将会被转换成空的 Object 对象，interface{} 无法被转换。
    - key: set api path prefix
      message:
        msg: 为所有的 API 添加统一的前缀
    - key: set output file
      message:
        msg: 设置输出文件
    - key: set watch file extension
      message:
        msg: 设置监视的文件扩展名
    - key: show current help info
      message:
        msg: 显示当前帮助信息
    - key: show help
      message:
        msg: 显示帮助信息
    - key: show version
      message:
        msg: 显示版本号
    - key: skip sub module
      message:
        msg: 忽略子模块的内容
    - key: src locale file
      message:
        msg: 指定源文件
    - key: the dest file %s is dir
      message:
        msg: 指定的翻译文件 %s 是一个目录
    - key: unknown tag %s
      message:
        msg: 未知的标签 %s 将被忽略
    - key: unsupported ast expr %+v
      message:
        msg: 不支持的 ast.Expr %+v
    - key: unsupported generics type %s
      message:
        msg: 不支持的范型 %s
    - key: unsupported marshal for %s
      message:
        msg: 不支持 %s 的序列化
    - key: unsupported unmarshal for %s
      message:
        msg: 不支持 %s 的反序列化
    - key: update locale file
      message:
        msg: 更新本地化的文件
    - key: |
        update locale file usage

        flags:
        {{flags}}
      message:
        msg: |
            依据源文件依次更新指定的本地化文件

            此操作将会把只存在于源文件中的翻译项添加至指定的目标文件中，
            而只存在于目标文件中的翻译项将被删除，一般在通过 locale
            提取完翻译项之后，可以调用此命令对所有的翻译内容进行一次更新。

            可用选项:
            {{flags}}
    - key: version incompatible
      message:
        msg: 版本不兼容
    - key: watch and reload
      message:
        msg: 热编译项目
    - key: watch and reload usage
      message:
        msg: |
            监视项目中的文件并在有修改的情况下重新编译项目

            web watch [options] [dir]

            options 可以为以下参数：
            {{flags}}

            dir 表示编译的代码，为 main 函数所在的目录或是文件。
            如果未指定，则采用当前目录。
    - key: watch frequency
      message:
        msg: 最小的文件修改间隔
    - key: watch.app
      message:
        msg: 应用
    - key: watch.compiler
      message:
        msg: 编译
    - key: watch.sys
      message:
        msg: 系统
